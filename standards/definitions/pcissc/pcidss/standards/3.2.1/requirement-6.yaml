---
requirements:
parent: 6
items:
  - id: 6.1
    description: "Establish a process to identify security vulnerabilities, using reputable outside sources for security vulnerability information, and assign a risk ranking (for example, as “high,” “medium,” or “low”) to newly discovered security vulnerabilities.
    "
    description_note: "Risk rankings should be based on industry best practices as well as consideration of potential impact. For example, criteria for ranking vulnerabilities may include consideration of the CVSS base score, and/or the classification by the vendor, and/or type of systems affected.
    
    Methods for evaluating vulnerabilities and assigning risk ratings will vary based on an organization’s environment and risk- assessment strategy. Risk rankings should, at a minimum, identify all vulnerabilities considered to be a “high risk” to the environment. In addition to the risk ranking, vulnerabilities may be considered “critical” if they pose an imminent threat to the environment, impact critical systems, and/or would result in a potential compromise if not addressed. Examples of critical systems may include security systems, public-facing devices and systems, databases, and other systems that store, process, or transmit cardholder data.
    "
    testing_procedures:
      - id: 6.1.a
        description: "Examine policies and procedures to verify that processes are defined for the following:
        
        • To identify new security vulnerabilities
        • To assign a risk ranking to vulnerabilities that includes identification of all “high risk” and “critical” vulnerabilities.
        • To use reputable outside sources for security vulnerability information.
        "
        description_note: ""
      - id: 6.1.b
        description: " Interview responsible personnel and observe processes to verify that:
        
        • New security vulnerabilities are identified.
        • A risk ranking is assigned to vulnerabilities that includes identification of all “high risk” and “critical” vulnerabilities.
        • Processes to identify new security vulnerabilities include using reputable outside sources for security vulnerability information.
        "
        description_note: ""
    guidance: "The intent of this requirement is that organizations keep up to date with new vulnerabilities that may impact their environment.
    
    Sources for vulnerability information should be trustworthy and often include vendor websites, industry news groups, mailing list, or RSS feeds.
    
    Once an organization identifies a vulnerability that could affect their environment, the risk that the vulnerability poses must be evaluated and ranked. The organization must therefore have a method in place to evaluate vulnerabilities on an ongoing basis and assign risk rankings to those vulnerabilities. This is not achieved by an ASV scan or internal vulnerability scan, rather this requires a process to actively monitor industry sources for vulnerability information.
    
    Classifying the risks (for example, as “high,” “medium,” or “low”) allows organizations to identify, prioritize, and address the highest risk items more quickly and reduce the likelihood that vulnerabilities posing the greatest risk will be exploited.
    "
    guidance_note: ""
  - id: 6.2
    description: "Ensure that all system components and software are protected from known vulnerabilities by installing applicable vendor- supplied security patches. Install critical security patches within one month of release.
    "
    description_note: "Critical security patches should be identified according to the risk ranking process defined in Requirement 6.1.
    "
    testing_procedures:
      - id: 6.2.a
        description: "Examine policies and procedures related to security- patch installation to verify processes are defined for:
        
        • Installation of applicable critical vendor-supplied security patches within one month of release.
        • Installation of all applicable vendor-supplied security patches within an appropriate time frame (for example, within three months).
        "
        description_note: ""
      - id: 6.2.b
        description: "For a sample of system components and related software, compare the list of security patches installed on each system to the most recent vendor security-patch list, to verify the following:
        
        • That applicable critical vendor-supplied security patches are installed within one month of release.
        • All applicable vendor-supplied security patches are installed within an appropriate time frame (for example, within three months).
        "
        description_note: ""
    guidance: "There is a constant stream of attacks using widely published exploits, often called \"zero day\" (an attack that exploits a previously unknown vulnerability), against otherwise secured systems. If the most recent patches are not implemented on critical systems as soon as possible, a malicious individual can use these exploits to attack or disable a system, or gain access to sensitive data.
    
    Prioritizing patches for critical infrastructure ensures that high-priority systems and devices are protected from vulnerabilities as soon as possible after a patch is released. Consider prioritizing patch installations such that security patches for critical or at-risk systems are installed within 30 days, and other lower-risk patches are installed within 2-3 months.
    
    This requirement applies to applicable patches for all installed software, including payment applications (both those that are PA-DSS validated and those that are not).
    "
    guidance_note: ""
  - id: 6.3
    description: "Develop internal and external software applications (including web-based administrative access to applications) securely, as follows:
    
    • In accordance with PCI DSS (for example, secure authentication and logging)
    • Based on industry standards and/or best practices.
    • Incorporating information security throughout the software-development life cycle
    "
    description_note: "This applies to all software developed internally as well as bespoke or custom software developed by a third party.
    "
    testing_procedures:
      - id: 6.3.a
        description: "Examine written software-development processes to verify that the processes are based on industry standards and/or best practices.
        "
        description_note: ""
      - id: 6.3.b
        description: "Examine written software-development processes to verify that information security is included throughout the life cycle.
        "
        description_note: ""
      - id: 6.3.c
        description: "Examine written software-development processes to verify that software applications are developed in accordance with PCI DSS.
        "
        description_note: ""
      - id: 6.3.d
        description: "Interview software developers to verify that written software-development processes are implemented.
        "
        description_note: ""
    guidance: "Without the inclusion of security during the requirements definition, design, analysis, and testing phases of software development, security vulnerabilities can be inadvertently or maliciously introduced into the production environment.
    
    Understanding how sensitive data is handled by the application—including when stored, transmitted, and when in memory—can help identify where data needs to be protected.
    "
    guidance_note: ""
    items:
      - id: 6.3.1
        description: "Remove development, test and/or custom application accounts, user IDs, and passwords before applications become active or are released to customers.
        "
        description_note: ""
        testing_procedures:
          - id: 6.3.1
            description: "Examine written software-development procedures and interview responsible personnel to verify that pre- production and/or custom application accounts, user IDs and/or passwords are removed before an application goes into production or is released to customers.
            "
            description_note: ""
        guidance: "Development, test and/or custom application accounts, user IDs, and passwords should be removed from production code before the application becomes active or is released to customers, since these items may give away information about the functioning of the application. Possession of such information could facilitate compromise of the application and related cardholder data.
        "
        guidance_note: ""
      - id: 6.3.2
        description: "Review custom code prior to release to production or customers in order to identify any potential coding vulnerability (using either manual or automated processes) to include at least the following:
        
        • Code changes are reviewed by individuals other than the originating code author, and by individuals knowledgeable about code-review techniques and secure coding practices.
        • Code reviews ensure code is developed according to secure coding guidelines
        • Appropriate corrections are implemented prior to release.
        • Code-review results are reviewed and approved by management prior to release.
        "
        description_note: "This requirement for code reviews applies to all custom code (both internal and public-facing), as part of the system development life cycle.
        
        Code reviews can be conducted by knowledgeable internal personnel or third parties. Public-facing web applications are also subject to additional controls, to address ongoing threats and vulnerabilities after implementation, as defined at PCI DSS Requirement 6.6.
        "
        testing_procedures:
          - id: 6.3.2.a
            description: "Examine written software-development procedures and interview responsible personnel to verify that all custom application code changes must be reviewed (using either manual or automated processes) as follows:
            
            • Code changes are reviewed by individuals other than the originating code author, and by individuals who are knowledgeable in code-review techniques and secure coding practices.
            • Code reviews ensure code is developed according to secure coding guidelines (see PCI DSS Requirement 6.5).
            • Appropriate corrections are implemented prior to release.
            • Code-review results are reviewed and approved by management prior to release.
            "
            description_note: ""
          - id: 6.3.2.b
            description: "Select a sample of recent custom application changes and verify that custom application code is reviewed according to 6.3.2.a, above.
            "
            description_note: ""
        guidance: "Security vulnerabilities in custom code are commonly exploited by malicious individuals to gain access to a network and compromise cardholder data.
        
        An individual knowledgeable and experienced in code-review techniques should be involved in the review process. Code reviews should be performed by someone other than the developer of the code to allow for an independent, objective review. Automated tools or processes may also be used in lieu of manual reviews, but keep in mind that it may be difficult or even impossible for an automated tool to identify some coding issues.
        
        Correcting coding errors before the code is deployed into a production environment or released to customers prevents the code exposing the environments to potential exploit. Faulty code is also far more difficult and expensive to address after it has been deployed or released into production environments.
        
        Including a formal review and signoff by management prior to release helps to ensure that code is approved and has been developed in accordance with policies and procedures.
        "
        guidance_note: ""
  - id: 6.4
    description: "Follow change control processes and procedures for all changes to system components. The processes must include the following:
    "
    description_note: ""
    testing_procedures:
      - id: 6.4
        description: "Examine policies and procedures to verify the following are defined:
        
        • Development/test environments are separate from production environments with access control in place to enforce separation.
        • A separation of duties between personnel assigned to the development/test environments and those assigned to the production environment.
        • Production data (live PANs) are not used for testing or development.
        • Test data and accounts are removed before a production system becomes active.
        • Change control procedures related to implementing security patches and software modifications are documented.
        "
        description_note: ""
    guidance: "Without properly documented and implemented change controls, security features could be inadvertently or deliberately omitted or rendered inoperable, processing irregularities could occur, or malicious code could be introduced.
    "
    guidance_note: ""
    items:
      - id: 6.4.1
        description: "Separate development/test environments from production environments, and enforce the separation with access controls.
        "
        description_note: ""
        testing_procedures:
          - id: 6.4.1.a
            description: "Examine network documentation and network device configurations to verify that the development/test environments are separate from the production environment(s).
            "
            description_note: ""
          - id: 6.4.1.b
            description: "Examine access controls settings to verify that access controls are in place to enforce separation between the development/test environments and the production environment(s).
            "
            description_note: ""  
        guidance: "Due to the constantly changing state of development and test environments, they tend to be less secure than the production environment. Without adequate separation between environments, it may be possible for the production environment, and cardholder data, to be compromised due to less- stringent security configurations and possible vulnerabilities in a test or development environment.
        "
        guidance_note: ""
      - id: 6.4.2
        description: "Separation of duties between development/test and production environments
        "
        description_note: ""
        testing_procedures:
          - id: 6.4.2
            description: "Observe processes and interview personnel assigned to development/test environments and personnel assigned to production environments to verify that separation of duties is in place between development/test environments and the production environment.
            "
            description_note: ""
        guidance: "Reducing the number of personnel with access to the production environment and cardholder data minimizes risk and helps ensure that access is limited to those individuals with a business need to know.
        
        The intent of this requirement is to separate development and test functions from production functions. For example, a developer may use an administrator-level account with elevated privileges in the development environment, and have a separate account with user-level access to the production environment.
        "
        guidance_note: ""
      - id: 6.4.3
        description: "Production data (live PANs) are not used for testing or development
        "
        description_note: ""
        testing_procedures:
          - id: 6.4.3.a
            description: "Observe testing processes and interview personnel to verify procedures are in place to ensure production data (live PANs) are not used for testing or development.
            "
            description_note: ""
          - id: 6.4.3.b
            description: "Examine a sample of test data to verify production data (live PANs) is not used for testing or development.
            "
            description_note: ""
        guidance: "Security controls are usually not as stringent in test or development environments. Use of production data provides malicious individuals with the opportunity to gain unauthorized access to production data (cardholder data).
        "
        guidance_note: ""
      - id: 6.4.4
        description: "Removal of test data and accounts from system components before the system becomes active / goes into production.
        "
        description_note: ""
        testing_procedures:
          - id: 6.4.4.a
            description: "Observe testing processes and interview personnel to verify test data and accounts are removed before a production system becomes active.
            "
            description_note: ""
          - id: 6.4.4.b
            description: "Examine a sample of data and accounts from production systems recently installed or updated to verify test data and accounts are removed before the system becomes active.
            "
            description_note: ""
        guidance: "Test data and accounts should be removed before the system component becomes active (in production), since these items may give away information about the functioning of the application or system. Possession of such information could facilitate compromise of the system and related cardholder data.
        "
        guidance_note: ""
      - id: 6.4.5
        description: "Change control procedures must include the following:
        "
        description_note: ""
        testing_procedures:
          - id: 6.4.5.a
            description: "Examine documented change control procedures and verify procedures are defined for:
            
            • Documentation of impact
            • Documented change approval by authorized parties
            • Functionality testing to verify that the change does not adversely impact the security of the system
            • Back-out procedures
            "
            description_note: ""
          - id: 6.4.5.b
            description: "For a sample of system components, interview responsible personnel to determine recent changes. Trace those changes back to related change control documentation. For each change examined, perform the following:
            "
            description_note: ""
        guidance: "If not properly managed, the impact of system changes—such as hardware or software updates and installation of security patches—might not be fully realized and could have unintended consequences.
        "
        guidance_note: ""
        items:
          - id: 6.4.5.1
            description: "Documentation of impact.
            "
            description_note: ""
            testing_procedures:
              - id: 6.4.5.1
                description: "Verify that documentation of impact is included in the change control documentation for each sampled change.
                "
                description_note: ""
            guidance: "The impact of the change should be documented so that all affected parties can plan appropriately for any processing changes.
            "
            guidance_note: ""
          - id: 6.4.5.2
            description: "Documented change approval by authorized parties.
            "
            description_note: ""
            testing_procedures:
              - id: 6.4.5.2
                description: "Verify that documented approval by authorized parties is present for each sampled change.
                "
                description_note: ""
            guidance: "Approval by authorized parties indicates that the change is a legitimate and approved change sanctioned by the organization.
            "
            guidance_note: ""
          - id: 6.4.5.3
            description: "Functionality testing to verify that the change does not adversely impact the security of the system.
            "
            description_note: ""
            testing_procedures:
              - id: 6.4.5.3.a
                description: "For each sampled change, verify that functionality testing is performed to verify that the change does not adversely impact the security of the system.
                "
                description_note: ""
              - id: 6.4.5.3.b
                description: "For custom code changes, verify that all updates are tested for compliance with PCI DSS Requirement 6.5 before being deployed into production.
                "
                description_note: ""
            guidance: "Thorough testing should be performed to verify that the security of the environment is not reduced by implementing a change. Testing should validate that all existing security controls remain in place, are replaced with equally strong controls, or are strengthened after any change to the environment.
            "
            guidance_note: ""
          - id: 6.4.5.4
            description: "Back-out procedures.
            "
            description_note: ""
            testing_procedures:
              - id: 6.4.5.4
                description: "Verify that back-out procedures are prepared for each sampled change.
                "
                description_note: ""
            guidance: "For each change, there should be documented back-out procedures in case the change fails or adversely affects the security of an application or system, to allow the system to be restored back to its previous state.
            "
            guidance_note: ""
      - id: 6.4.6
        description: "Upon completion of a significant change, all relevant PCI DSS requirements must be implemented on all new or changed systems and networks, and documentation updated as applicable.
        "
        description_note: ""
        testing_procedures:
          - id: 6.4.6
            description: "For a sample of significant changes, examine change records, interview personnel, and observe the affected systems/networks to verify that applicable PCI DSS requirements were implemented and documentation updated as part of the change.
            "
            description_note: ""
        guidance: "Having processes to analyze significant changes helps ensure that all appropriate PCI DSS controls are applied to any systems or networks added or changed within the in-scope environment.
        
        Building this validation into change management processes helps ensure that device inventories and configuration standards are kept up to date and security controls are applied where needed.
        
        A change management process should include supporting evidence that PCI DSS requirements are implemented or preserved through the iterative process. Examples of PCI DSS requirements that could be impacted include, but are not limited to:
        
        • Network diagram is updated to reflect changes.
        • Systems are configured per configuration standards, with all default passwords changed and unnecessary services disabled.
        • Systems are protected with required controls— e.g., file-integrity monitoring (FIM), anti-virus, patches, audit logging.
        • Sensitive authentication data (SAD) is not stored and all cardholder data (CHD) storage is documented and incorporated into data- retention policy and procedures
        • New systems are included in the quarterly vulnerability scanning process.
        "
        guidance_note: ""
  - id: 6.5
    description: "Address common coding vulnerabilities in software-development processes as follows:
    
    • Train developers at least annually in up- to-date secure coding techniques, including how to avoid common coding vulnerabilities.
    • Develop applications based on secure coding guidelines.
    "
    description_note: "The vulnerabilities listed at 6.5.1 through 6.5.10 were current with industry best practices when this version of PCI DSS was published. However, as industry best practices for vulnerability management are updated (for example, the OWASP Guide, SANS CWE Top 25, CERT Secure Coding, etc.), the current best practices must be used for these requirements.
    "
    testing_procedures:
      - id: 6.5.a
        description: "Examine software-development policies and procedures to verify that up-to-date training in secure coding techniques is required for developers at least annually, based on industry best practices and guidance.
        "
        description_note: ""
      - id: 6.5.b
        description: "Examine records of training to verify that software developers receive up-to-date training on secure coding techniques at least annually, including how to avoid common coding vulnerabilities.
        "
        description_note: ""
      - id: 6.5.c
        description: "Verify that processes are in place to protect applications from, at a minimum, the following vulnerabilities:
        "
        description_note: ""
    guidance: "The application layer is high-risk and may be targeted by both internal and external threats.
    
    Requirements 6.5.1 through 6.5.10 are the minimum controls that should be in place, and organizations should incorporate the relevant secure coding practices as applicable to the particular technology in their environment.
    
    Application developers should be properly trained to identify and resolve issues related to these (and other) common coding vulnerabilities. Having staff knowledgeable of secure coding guidelines should minimize the number of security vulnerabilities introduced through poor coding practices. Training for developers may be provided in-house or by third parties and should be applicable for technology used.
    
    As industry-accepted secure coding practices change, organizational coding practices and developer training should likewise be updated to address new threats—for example, memory scraping attacks.
    
    The vulnerabilities identified in 6.5.1 through 6.5.10 provide a minimum baseline. It is up to the organization to remain up to date with vulnerability trends and incorporate appropriate measures into their secure coding practices.
    "
    guidance_note: ""
    items:
      - id: 6.5.1
        description: "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.
        "
        description_note: "Requirements 6.5.1, apply to all applications (internal or external).
        "
        testing_procedures:
          - id: 6.5.1
            description: " Examine software-development policies and procedures and interview responsible personnel to verify that injection flaws are addressed by coding techniques that include:
            
            • Validating input to verify user data cannot modify meaning of commands and queries.
            • Utilizing parameterized queries.
            "
            description_note: ""
        guidance: "Injection flaws, particularly SQL injection, are a commonly used method for compromising applications. Injection occurs when user-supplied data is sent to an interpreter as part of a command or query. The attacker's hostile data tricks the interpreter into executing unintended commands or changing data, and allows the attacker to attack components inside the network through the application, to initiate attacks such as buffer overflows, or to reveal both confidential information and server application functionality.
        
        Information should be validated before being sent to the application—for example, by checking for all alpha characters, mix of alpha and numeric characters, etc.
        "
        guidance_note: ""
      - id: 6.5.2
        description: "Buffer overflows
        "
        description_note: "Requirements 6.5.2, apply to all applications (internal or external).
        "
        testing_procedures:
          - id: 6.5.2
            description: "Examine software-development policies and procedures and interview responsible personnel to verify that buffer overflows are addressed by coding techniques that include:
            
            • Validating buffer boundaries.
            • Truncating input strings.
            "
            description_note: ""
        guidance: "Buffer overflows occur when an application does not have appropriate bounds checking on its buffer space. This can cause the information in the buffer to be pushed out of the buffer’s memory space and into executable memory space. When this occurs, the attacker has the ability to insert malicious code at the end of the buffer and then push that malicious code into executable memory space by overflowing the buffer. The malicious code is then executed and often enables the attacker remote access to the application and/or infected system.
        "
        guidance_note: ""
      - id: 6.5.3
        description: "Insecure cryptographic storage
        "
        description_note: "Requirements 6.5.3, apply to all applications (internal or external).
        "
        testing_procedures:
          - id: 6.5.3
            description: "Examine software-development policies and procedures and interview responsible personnel to verify that insecure cryptographic storage is addressed by coding techniques that:
            
            • Prevent cryptographic flaws.
            • Use strong cryptographic algorithms and keys.
            "
            description_note: ""
        guidance: "Applications that do not utilize strong cryptographic functions properly to store data are at increased risk of being compromised, and exposing authentication credentials and/or cardholder data. If an attacker is able to exploit weak cryptographic processes, they may be able to gain clear-text access to encrypted data.
        "
        guidance_note: ""
      - id: 6.5.4
        description: "Insecure communications
        "
        description_note: "Requirements 6.5.4, apply to all applications (internal or external).
        "
        testing_procedures:
          - id: 6.5.4
            description: " Examine software-development policies and procedures and interview responsible personnel to verify that insecure communications are addressed by coding techniques that properly authenticate and encrypt all sensitive communications.
            "
            description_note: ""
        guidance: "Applications that fail to adequately encrypt network traffic using strong cryptography are at increased risk of being compromised and exposing cardholder data. If an attacker is able to exploit weak cryptographic processes, they may be able to gain control of an application or even gain clear-text access to encrypted data.
        "
        guidance_note: ""
      - id: 6.5.5
        description: "Improper error handling
        "
        description_note: "Requirements 6.5.5, apply to all applications (internal or external).
        "
        testing_procedures:
          - id: 6.5.5
            description: "Examine software-development policies and procedures and interview responsible personnel to verify that improper error handling is addressed by coding techniques that do not leak information via error messages (for example, by returning generic rather than specific error details).
            "
            description_note: ""
        guidance: "Applications can unintentionally leak information about their configuration or internal workings, or expose privileged information through improper error handling methods. Attackers use this weakness to steal sensitive data or compromise the system altogether. If a malicious individual can create errors that the application does not handle properly, they can gain detailed system information, create denial- of-service interruptions, cause security to fail, or crash the server. For example, the message \"incorrect password provided\" tells an attacker the user ID provided was accurate and that they should focus their efforts only on the password. Use more generic error messages, like \"data could not be verified.\"
        "
        guidance_note: ""
      - id: 6.5.6
        description: "All “high risk” vulnerabilities identified in the vulnerability identification process (as defined in PCI DSS Requirement 6.1).
        "
        description_note: ""
        testing_procedures:
          - id: 6.5.6
            description: "Examine software-development policies and procedures and interview responsible personnel to verify that coding techniques address any “high risk” vulnerabilities that could affect the application, as identified in PCI DSS Requirement 6.1.
            "
            description_note: ""
        guidance: "All vulnerabilities identified by an organization’s vulnerability risk-ranking process (defined in Requirement 6.1) to be “high risk” and that could affect the application should be identified and addressed during application development.
        "
        guidance_note: ""
      - id: 6.5.7
        description: "Cross-site scripting (XSS)
        "
        description_note: "Requirements 6.5.7, apply to web applications and application interfaces (internal or external)
        "
        testing_procedures:
          - id: 6.5.7
            description: "Examine software-development policies and procedures and interview responsible personnel to verify that cross-site scripting (XSS) is addressed by coding techniques that include
            
            • Validating all parameters before inclusion
            • Utilizing context-sensitive escaping.
            "
            description_note: ""
        guidance: "XSS flaws occur whenever an application takes user-supplied data and sends it to a web browser without first validating or encoding that content. XSS allows attackers to execute script in the victim's browser, which can hijack user sessions, deface web sites, possibly introduce worms, etc.
        "
        guidance_note: ""
      - id: 6.5.8
        description: "Improper access control (such as insecure direct object references, failure to restrict URL access, directory traversal, and failure to restrict user access to functions).
        "
        description_note: "Requirements 6.5.8, apply to web applications and application interfaces (internal or external)
        "
        testing_procedures:
          - id: 6.5.8
            description: "Examine software-development policies and procedures and interview responsible personnel to verify that improper access control—such as insecure direct object references, failure to restrict URL access, and directory traversal—is addressed by coding technique that includes:
            
            • Proper authentication of users
            • Sanitizing input
            • Not exposing internal object references to users
            • User interfaces that do not permit access to unauthorized functions.
            "
            description_note: ""
        guidance: "A direct object reference occurs when a developer exposes a reference to an internal implementation object, such as a file, directory, database record, or key, as a URL or form parameter. Attackers can manipulate those references to access other objects without authorization.
        
        Consistently enforce access control in presentation layer and business logic for all URLs. Frequently, the only way an application protects sensitive functionality is by preventing the display of links or URLs to unauthorized users. Attackers can use this weakness to access and perform unauthorized operations by accessing those URLs directly.
        
        An attacker may be able to enumerate and navigate the directory structure of a website (directory traversal) thus gaining access to unauthorized information as well as gaining further insight into the workings of the site for later exploitation.
        
        If user interfaces permit access to unauthorized functions, this access could result in unauthorized individuals gaining access to privileged credentials or cardholder data. Only authorized users should be permitted to access direct object references to sensitive resources. Limiting access to data resources will help prevent cardholder data from being presented to unauthorized resources.
        "
        guidance_note: ""
      - id: 6.5.9
        description: "Cross-site request forgery (CSRF)
        "
        description_note: "Requirements 6.5.9, apply to web applications and application interfaces (internal or external)
        "
        testing_procedures:
          - id: 6.5.9
            description: "Examine software development policies and procedures and interview responsible personnel to verify that cross-site request forgery (CSRF) is addressed by coding techniques that ensure applications do not rely on authorization credentials and tokens automatically submitted by browsers.
            "
            description_note: ""
        guidance: "A CSRF attack forces a logged-on victim's browser to send a pre-authenticated request to a vulnerable web application, which then enables the attacker to perform any state-changing operations the victim is authorized to perform (such as updating account details, making purchases, or even authenticating to the application).
        "
        guidance_note: ""
      - id: 6.5.10
        description: "Broken authentication and session management.
        "
        description_note: "Requirements 6.5.10, apply to web applications and application interfaces (internal or external)
        "
        testing_procedures:
          - id: 6.5.10
            description: "Examine software development policies and procedures and interview responsible personnel to verify that broken authentication and session management are addressed via coding techniques that commonly include:
            • Flagging session tokens (for example cookies) as “secure”
            • Not exposing session IDs in the URL
            • Incorporating appropriate time-outs and rotation of session IDs after a successful login.
            "
            description_note: ""
        guidance: "Secure authentication and session management prevents unauthorized individuals from compromising legitimate account credentials, keys, or session tokens that would otherwise enable the intruder to assume the identity of an authorized user.
        "
        guidance_note: ""
